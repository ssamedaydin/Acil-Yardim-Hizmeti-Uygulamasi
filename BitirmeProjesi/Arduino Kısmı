//Pulse
int pulsePin = A0; // S(kahverengi kablo) A0 analog pinine bağlanmıştır.
int blinkPin = 13;
// Ölçüm ile değerleri atanacak değişken tanımlamaları
volatile int BPM; // A0 analog pinine gelen değer burada tutulur.
volatile int Signal; // Sensörden gelen değer burada tutulur.
volatile int IBI = 600; // Nabız atış süresi burada tutulur.
volatile boolean Pulse = false; // Nabız ölcüldügünde "True" ölcülemediginde "False" değeri burada tutulur. 
volatile boolean QS = false; // Arduino'ya gelen nabız atışı burada tutulur.

static boolean serialVisual = true; // Nabız atışını serial ekran bağlantısının "True" değeri burada tutulur.

volatile int rate[10]; // IBI değişkeninin son on değeri bu dizide tutulur.
volatile unsigned long sampleCounter = 0; // Nabız zamanlamasını belirlemek için kullanıldı.
volatile unsigned long lastBeatTime = 0;  // IBI değişkenini tespit etmek için kullanıldı.
volatile int P = 512; // Nabız atışının en üst değeri burada tutulur.
volatile int T = 512; // Nabız atışının en alt değeri burada tutulur.
volatile int thresh = 525; // Nabız atışının anlık değeri burada tutulur.
volatile int amp = 100; // Nabız atışının genlik değeri burada tutulur.
volatile boolean firstBeat = true; // BPM ile nabız atış dizisinin değeri burada döndürüldü.
volatile boolean secondBeat = false; // BPM ile nabız atış dizisinin diğer değeri burada döndürüldü.
//Pulse

//LM35

#define Lm35Pin A1 //Sıcaklık sensörünün A1 analog pini ile bağlantısı.
float OkunanDeger = 0; // Analog pinden gelen değerin tutulacağı değişken.
float Sicaklik = 0; // Gerilimin sıcaklığa dönüştürüldüğünde elde edilen değeri tutan değişken.
float GerilimDegeri = 0; // Gerilimin başlangıç değerini tutan değişken.

//LM35

//MQ2

int esikDegeri =200; // MQ2 Sensöründen alınan verinin karşılaştırıldığı değer.Gaz yoğunluğunu belirler.
int buzzerPin = 9; // Gaz ya da duman algılanması durumunda ses uyarısı verecek buzzer modülünün bağlandığı pin.
int deger; // MQ2 sensöründen gelen değeri bu değişkene atanır.

//MQ2


//MAX30100 Pulse Oximeter için gerekli kütühaneler
#include <CircularBuffer.h>
#include <MAX30100.h>
#include <MAX30100_BeatDetector.h>
#include <MAX30100_Filters.h>
#include <MAX30100_PulseOximeter.h>
#include <MAX30100_Registers.h>
#include <MAX30100_SpO2Calculator.h>

#include <MAX30100.h>

#include <Wire.h>
#include "MAX30100_PulseOximeter.h"
 
#define REPORTING_PERIOD_MS     5000

PulseOximeter pox;
 
uint32_t tsLastReport = 0;
 
// Ölçüm algılandığını tespit eden metot. 
void onBeatDetected()
{
    Serial.println("");
}

void setup()
{
    Serial.begin(115200); // Serial ekran ile bağlantı kuruldu.
 
    Serial.print("Kan Oksijen Doygunluğu Algılanıyor... ");
 
    // Ölçümün başlatıldığı kısım.
    if (!pox.begin()) {
        Serial.println(" Başarısız");
        for(;;);
    } else {
        Serial.println(" Başarılı");
    }

    // IR LED için varsayılan akım 50mA'dir. Led hatası tespiti durumunda aşağıdaki blog kullanılabilir.
    // pox.setIRLedCurrent(MAX30100_LED_CURR_7_6MA);
 
    // Oksijen değeri tespit edildiğinde bu kısımda kayıt edilir.
    pox.setOnBeatDetectedCallback(onBeatDetected);

    //pulse
    pinMode(blinkPin,OUTPUT); 
    interruptSetup(); // Her iki saniyede bir nabız sensörünün sinyalini almak için oluşturulan metot burada kullanıldı.  

    //pulse

    //MQ2

    pinMode(buzzerPin,OUTPUT);

    //MQ2
}
 
void loop()
{
    

    //LM35

       OkunanDeger = analogRead(Lm35Pin); // A0 analog pininden gelen değer değişkene aktarılır.

      GerilimDegeri = (OkunanDeger/1023)*5000; // Okunan değer olabilecek en üst değer olan 1023'e bölünür.Gelen değeri gerilime çevirmek için ise pindeki 5V (5000mV) ile çarpılır.
      Sicaklik = GerilimDegeri/10.0; // LM35 modülü her bir derece için 10mV'luk çıkış verdiği için gerilim değerini 10'a bölerek sicaklık elde edilir.
      //Serial Ekranına yazdırma işlemleri
      if(Sicaklik > 50 && Sicaklik < 50.50)
      {
      Serial.print("Sicaklik Değeri: ");
      Serial.print(Sicaklik);
      Serial.println("C");
      }
   

//LM35

    //pulse

    serialOutput();  
   
  if (QS == true) // Nabız atışı tespitinin sorgulanması. Nabız değeri tespit edildiğinde QS değişkeni "True" olacak.
    {     
      serialOutputWhenBeatHappens(); // Nabız atışının devam etmesi için oluşturulan metot.    
      QS = false; // Diğer Nabız değeri alınması için QS değişkeni "False" olacak.    
    }
     
  delay(20); // Gecikme uygulandı.

  //pulse

  // Kayıt edilen değerlerin güncellendiği kısım.
    pox.update();
 
    // Oksijen değerinin serial ekranına aktarıldığı ve "0" değerinin geçersiz kılındığı kısım.
    if (millis() - tsLastReport > REPORTING_PERIOD_MS) {
        Serial.print(" Kan Oksijen Doygunlugu (SpO2):");
        Serial.print(pox.getSpO2());
        Serial.println("%");
 
        tsLastReport = millis();
    }

    //MQ2

    deger = analogRead(A2); // A2 analog pininden okunan veri değer değişkenine aktarılır.

    // okunan değer belirlediğimiz değerden yüksek çıkması durumunda gaz algılaması gerçekleşir ve buzzer sesli uarı verir.
    if(deger > esikDegeri){
      Serial.println(" GAZ ALGILANDI");
      digitalWrite(buzzerPin,HIGH);
      delay(100);
      digitalWrite(buzzerPin,LOW);
      delay(100);
    }
    else{ // değilse sesli uyarı vermez.
      digitalWrite(buzzerPin,LOW);
     // Serial.println(" GAZ YOK");
    }

//MQ2
}

void interruptSetup()
{     
  // Her 2 milisaniye de bir tepkime vermesi için timer uygulandı.
  TCCR2A = 0x02;     
  TCCR2B = 0x06;    
  OCR2A = 0X7C;    
  TIMSK2 = 0x02;     
  sei();                  
} 

 
// Serial çıktısı almak için kullanılan metot. 
void serialOutput()
{  
 if (serialVisual == true)
  {  
     arduinoSerialMonitorVisual('-', Signal);
  } 
 else
  {
      sendDataToSerial('S', Signal);
   }        
}

// Nabız atışının devam etmesini ve serial ekranında değerleri görmemizi sağlayan metot.
void serialOutputWhenBeatHappens()
{    
 if (serialVisual == true && BPM < 100) 
   {            
     Serial.print(" Nabız - ");
     Serial.print("Bpm: ");
     Serial.println(BPM);
   }
 else
   {
     /*sendDataToSerial('B',BPM); 
     sendDataToSerial('Q',IBI); */
   }   
}

void arduinoSerialMonitorVisual(char symbol, int data )
{    
  const int sensorMin = 0;      // Sensörden gelen en az değer burada tutuldu.
  const int sensorMax = 1024;    // Sensörden gelen en yüksek değer burada tutuldu.
  int sensorReading = data; // Sensörün okuduğu değer 12 seçeneğe ayrıldı.
  int range = map(sensorReading, sensorMin, sensorMax, 0, 11);
}


void sendDataToSerial(char symbol, int data )
{
   Serial.print(symbol);
   Serial.println(data);                
}

ISR(TIMER2_COMPA_vect) // Timer2'nin başlatıldığı kısım.
{  
  cli();                                      
  Signal = analogRead(pulsePin);              // Nabız sensörünün okunması.
  sampleCounter += 2;                         // Milisaniye'nin takip edilmesi.
  int N = sampleCounter - lastBeatTime;       // Ölçüm sırasında görültüyü önlemek için son nabız ölçümü ile geçen zaman çıkarıldı.
                                             
  if(Signal < thresh && N > (IBI/5)*3) 
    {      
      if (Signal < T)
      {                        
        T = Signal;
      }
    }

  if(Signal > thresh && Signal > P) // Ölçüm sırasında gürültüyü önlemek için gereken ek kısım.
    {          
      P = Signal;                             
    }                                       

  // Nabız ölçümünün gerçekleştiği kısım. Nabız atışı tespit edildiğinde sinyal değeri yükselecektir.
  if (N > 250)
  {                                   
    if ( (Signal > thresh) && (Pulse == false) && (N > (IBI/5)*3) )
      {        
        Pulse = true;                               
        digitalWrite(blinkPin,HIGH);                
        IBI = sampleCounter - lastBeatTime;         
        lastBeatTime = sampleCounter;               
  
        if(secondBeat)
        {                        
          secondBeat = false;                 
          for(int i=0; i<=9; i++) 
          {             
            rate[i] = IBI;                      
          }
        }
  
        if(firstBeat) // İlk nabız değeri tespit edildiğinde değişken "True" döndürecektir.
        {                         
          firstBeat = false;                  
          secondBeat = true;                   
          sei();                               
          return;                              
        }   
      // keep a running total of the last 10 IBI values
      word runningTotal = 0;                   

      for(int i=0; i<=8; i++)
        {                
          rate[i] = rate[i+1];                  
          runningTotal += rate[i];             
        }

      rate[9] = IBI; // Nabız değerlerinin tutulduğu dizi IBI değişkenine eklendiği kısım.                          
      runningTotal += rate[9];               
      runningTotal /= 10;                    
      BPM = 60000/runningTotal; // Bir dakikada kaç nabız değeri gerçekleşileceğini hesaplayan BPM değişkeni.
      QS = true;                              
    }                       
  }

  // Nabız değerinin düşmesiyle ölçümün sonlanması.
  if (Signal < thresh && Pulse == true)
    {   
      digitalWrite(blinkPin,LOW);            
      Pulse = false;                         
      amp = P - T; // Nabız dalgasının genliği hesaplanır.
      thresh = amp/2 + T; // Genliğin %50'si hesaplanır.
      P = thresh; // Sonraki ölçüm için değişkenler sıfırlanır.
      T = thresh;
    }

  if (N > 2500) //2.5 saniye nabız değeri olmamasının sorgulanması.
    {     
      // Değişkenler başlangıç değerlerine geri atanır.                      
      thresh = 512;                          
      P = 512;                               
      T = 512;                               
      lastBeatTime = sampleCounter;                 
      firstBeat = true;                      
      secondBeat = false;                    
    }

  sei();                                   
}
